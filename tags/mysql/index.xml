<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on 庆玲的博客</title>
    <link>https://qingling0910.github.io/tags/mysql/</link>
    <description>Recent content in mysql on 庆玲的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Apr 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://qingling0910.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql连接</title>
      <link>https://qingling0910.github.io/2022/mysql_join/</link>
      <pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql_join/</guid>
      <description>A inner join B：取交集
②A left join B：取A全部，B没有对应的值，则为null
③A right join B：取B全部，A没有对应的值，则为null
④A full outer join B：取并集，彼此没有对应的值为null</description>
    </item>
    
    <item>
      <title>mysql中limit的用法</title>
      <link>https://qingling0910.github.io/2022/mysql_limit/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql_limit/</guid>
      <description>语法一 SELECT * FROM 表名 limit m,n; 
语法二 SELECT * FROM table LIMIT [offset,] rows; 1.m代表从m+1条记录行开始检索，n代表取出n条数据。(m可设为0) 如： SELECT * FROM 表名 limit 6,5; 表示：从第7条记录行开始算，取出5条数据 2.</description>
    </item>
    
    <item>
      <title>mysql字符串函数</title>
      <link>https://qingling0910.github.io/2022/mysql_function/</link>
      <pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql_function/</guid>
      <description>假如结果的长度大于 max_allowed_packet 系统变量的最大值时，字符串值函数的返回值为NULL。请参见7.5.2节，“调节服务器参数”。
对于在字符串位置操作的函数，第一个位置的编号为 1。
ASCII(str) 返回值为字符串str 的最左字符的数值。假如str为空字符串，则返回值为 0 。假如str 为NULL，则返回值为 NULL。 ASCII()用于带有从 0到255的数值的字符。
mysql&amp;gt; SELECT ASCII(&amp;lsquo;2&amp;rsquo;);
 -&amp;gt; 50  mysql&amp;gt; SELECT ASCII(2);</description>
    </item>
    
    <item>
      <title>mysql count函数</title>
      <link>https://qingling0910.github.io/2022/mysql_count/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql_count/</guid>
      <description>mysql count函数 1.统计所有记录的数量
select count（*) from table_name; 2.统计某列的数量
select count(column_name) from table_name where 条件; 3.统计某列不重复的数量 select count(distinct column_name) from table_name where 条件; 4.</description>
    </item>
    
    <item>
      <title>mysql concat函数</title>
      <link>https://qingling0910.github.io/2022/mysql_concat/</link>
      <pubDate>Sun, 10 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql_concat/</guid>
      <description>mysql concat函数 1.语法：concat(str1,str2&amp;hellip;strn) 注意：返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null
例1：select concat(&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;); 输出：abc 例2:select concat(&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,null); 输出：null mysql中的concat_ws函数 语法；concat_ws(separator,str1,str2)
concat_ws()代表Concat With Separator，是CONCAT()的特殊形式，第一个参数是其他参数的分隔符。分隔符的位置放在要连接的两个字符串之间，分隔符可以是一个字符串，也可以是一个其他参数
注意：如果分隔符为null，则结果为null
eg:字符串链接以逗号分隔 select concat_ws(&amp;quot;,&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;); 输出结果:123 与 mysql 中concat函数不同的是，concat_ws函数在执行的时候，不会因为 null 值而返回 null select concat_WS(&amp;quot;,&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,null); 输出结果：1.</description>
    </item>
    
    <item>
      <title>今日学习内容&#34;</title>
      <link>https://qingling0910.github.io/2022/mysql_having/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql_having/</guid>
      <description>今日学习内容 1.mysql 中 having 和where 的区别 1）having 应该用在 group by之后，表示在分组后计算having 后面的表达式，通常和函数配合使用； 2）where 用在 group by之后，表示分组之前计算 where后面的表达式；
2.如何设置联合主键 create table table_name(column1_name 数据类型,column2_name 数据类型，primary key(column1_name,column2_name));</description>
    </item>
    
    <item>
      <title>drop、delete、truncate的区别</title>
      <link>https://qingling0910.github.io/2022/dropdeletetruncate/</link>
      <pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/dropdeletetruncate/</guid>
      <description>drop、delete、truncate的区别 1.delete语句执行删除的过程是每次从表中删除一行，并且将该行的删除操作作为事务记录在日志中保存以便进行回滚操作； truncate table 则一次性地从表中删除所有的数据，并不把单独的删除操作记录记入日志保存，删除行是不能恢复的。并且在删除的过程中不会激活与表有关的删除触发器。执行速度快； 2.表和索引所占空间 当表被truncate 后，这个表和索引所占用的空间会恢复到初始大小； delete 操作不会减少表或索引所占用的空间 drop 语句将表所占用的空间全部释放掉 3.一般而言，drop&amp;gt;trunacate&amp;gt;delete 4.应用范围 truncate 只能对table ； delete可以是table 和 view 5.</description>
    </item>
    
    <item>
      <title>mysql面试题</title>
      <link>https://qingling0910.github.io/2022/mysql_interviwe/</link>
      <pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql_interviwe/</guid>
      <description>面试中MySQL一些常见的问题 1、CHAR、VARCHAR的区别是什么？
VARCHAR类型用于存储可变长度字符串，是最常见的字符串数据类型。它比固定长度类型更节省空间，因为它仅使用必要的空间(根据实际字符串的长度改变存储空间)。
VARCHAR节省了存储空间，所以对性能也有帮助。但是，由于行是变长的，在UPDATE时可能使行变得比原来更长，这就导致需要做额外的工作。如果一个行占用的空间增长，并且在页内没有更多的空间可以存储，在这种情况下，不同的存储引擎的处理方式是不一样的。例如，MylSAM会将行拆成不同的片段存储，InnoDB则需要分裂页来使行可以放进页内。
CHAR类型用于存储固定长度字符串：MySQL总是根据定义的字符串长度分配足够的空间。当存储CHAR值时，MySQL会删除字符串中的末尾空格(在MySQL 4.1和更老版本中VARCHAR 也是这样实现的——也就是说这些版本中CHAR和VARCHAR在逻辑上是一样的，区别只是在存储格式上)。
同时，CHAR值会根据需要采用空格进行剩余空间填充，以方便比较和检索。但正因为其长度固定，所以会占据多余的空间，也是一种空间换时间的策略。
CHAR适合存储很短或长度近似的字符串。例如，CHAR非常适合存储密码的MD5值，因为这是一个定长的值。对于经常变更的数据，CHAR也比VARCHAR更好，因为定长的CHAR类型不容易产生碎片。对于非常短的列，CHAR比VARCHAR在存储空间上也更有效率。例如用CHAR(1)来存储只有Y和N的值，如果采用单字节字符集只需要一个字节，但是VARCHAR(1)却需要两个字节，因为还有一个记录长度的额外字节。
2、TRUNCATE和DELETE的区别是什么？
DELETE命令从一个表中删除某一行，或多行，TRUNCATE命令永久地从表中删除每一行。
3、什么是触发器，MySQL中都有哪些触发器？
触发器是指一段代码，当触发某个事件时，自动执行这些代码。在MySQL数据库中有如下六种触发器：1.Before Insert2.After Insert3.Before Update4.After Update5.Before Delete6.After Delete
4、FLOAT和DOUBLE的区别是什么？</description>
    </item>
    
    <item>
      <title>mysql创建用户及授权</title>
      <link>https://qingling0910.github.io/2022/mysql_user/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql_user/</guid>
      <description>1.创建用户： CREATE USER &amp;lsquo;username&amp;rsquo;@&amp;lsquo;host&amp;rsquo; IDENTIFIED BY &amp;lsquo;password&amp;rsquo;; 说明：
 username:你将创建的用户名 host：指定该用户在哪个主机上可以登陆，如果是本地用户可以用 localhost ，如果想让该用户可以从任意远程主机登录，可以使用通配符 % password：该用户的登录密码，密码可以为空，如果为空则该用户可以不需要密码登录服务器  2.授权： GRANT privileges ON database_name.</description>
    </item>
    
    <item>
      <title>mysql修改命令</title>
      <link>https://qingling0910.github.io/2022/mysql_update/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql_update/</guid>
      <description>1、修改数据库的编码 alter database db_name character set [=] charset_name; //db_name 为数据库名，charset_name 为编码格式；
2、修改表名 alter table table_name rename to new_table_name; table_name 为表名， new_table_name 为新表名</description>
    </item>
    
    <item>
      <title>Markdown的语法</title>
      <link>https://qingling0910.github.io/2022/mysql_index/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql_index/</guid>
      <description>mysql索引 优点： mysql索引可以大大提高mysql的检索速度；
创建索引时，需要确保索引是应用在mysql查询语句的条件（一般作为where子句的条件） 实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录； 缺点： 提高查询速度的同时，会降低更新表的速度，如对表进行insert、update和delete； 因为更新表时，mysql不仅要保存数据，还要保存索引文件； 建立索引会占用磁盘空间的索引文件；
普通索引   创建索引（最基本的索引，没有任何限制） CREATE INDEX index_name ON table_name (column_name) 如果是CHAR，VARCHAR类型，length可以小于字段实际长度； 如果是BLOB和TEXT类型，必须指定length。</description>
    </item>
    
    <item>
      <title>mysql常用命令</title>
      <link>https://qingling0910.github.io/2022/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://qingling0910.github.io/2022/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>mysql常用语法
1、查看当前打开的数据库 SELECT DATABASE();
2、查看数据库编码 SHOW CREATE DATABASE db_name/** db_name为要修改的数据库名 */
3、查看所有数据库 show databases;
4、查看所有数据表 show tables
5、查看指定数据看下的表 show tables from db_name; //db_name数据库名</description>
    </item>
    
  </channel>
</rss>